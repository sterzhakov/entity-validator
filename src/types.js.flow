// @flow

export type Translate = (path: string, params?: { [string]: any }) => string;

export type Entity = { [string]: any };
export type CheckResult = null | { [string]: any };
export type CheckParams = { [string]: any };

export type Validator = {
  key: string,
  createAttributes: ({ [string]: mixed }) => Array<Attribute>
};

export type Attribute = {
  key: string,
  rules: Array<string | Rule>,
};

export type Rule = {
  key: string,
  params: { [string]: mixed },
  attribute?: string,
};

export type Matcher = {
  key: string | null,
  params?: CheckParams,
  attribute?: string,
  check: (
    enity: Entity | null,
    attribute: string | null,
    CheckParams,
  ) => CheckResult | Promise<CheckResult>,
  message: (translate: Translate, checkResult: {[string]: mixed}) => string,
};

export type MatcherError = {
  key: string | null,
  attribute: string | null,
  message: string,
  matcher: Matcher,
};


export type CreateValidatorAttributesParams = {
  validators: Array<Validator>,
  validatorKey: string,
  validatorParams: { [string]: mixed },
  [string]: any,
}
export type CreateValidatorAttributesResult =
  {
    ...CreateValidatorAttributesParams,
    validatorAttributes: Array<Attribute>,
  };
export type CreateValidatorAttributes =
  (CreateValidatorAttributesParams) => CreateValidatorAttributesResult;


export type CreateValidatorRulesParams = {
  validatorAttributes: Array<Attribute>,
  [string]: any,
};
export type CreateValidatorRulesResult = CreateValidatorRulesParams & {
  validatorRules: Array<Rule>,
};
export type CreateValidatorRules =
  (CreateValidatorRulesParams) => CreateValidatorRulesResult;

export type CreateValidatorMatchersParams = {
  validatorRules: Array<Rule>,
  matchers: Array<Matcher>,
  [string]: any,
};
export type CreateValidatorMatchersResult = CreateValidatorMatchersParams & {
  validatorMatchers: Array<Matcher>
};
export type CreateValidatorMatchers =
  (CreateValidatorMatchersParams) => CreateValidatorMatchersResult;

export type CreateValdiatorErrorsParams = {
  entity: Entity,
  validatorMatchers: Array<Matcher>,
  translate: Translate,
  [string]: any,
}
export type CreateValidatorMatchersErrorsResult =
  Promise<CreateValdiatorErrorsParams & {
    validatorMatchersErrors: Array<MatcherError>,
  }>;
export type CreateValidatorMatchersErrors =
  (CreateValdiatorErrorsParams) => CreateValidatorMatchersErrorsResult;

export type Validate = ({
  translate: Translate,
  entity: Entity,
  matchers: Array<Matcher>,
  validators: Array<Validator>,
  validatorKey: string,
  validatorParams: { [string]: mixed },
  [string]: mixed,
}) => CreateValidatorMatchersErrorsResult;
