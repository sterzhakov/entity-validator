// @flow

export type Translate = (path: string, params?: { [string]: any }) => string;

export type Entity = { [string]: any };
export type CheckResult = null | { [string]: any };
export type CheckParams = { [string]: any };

export type Attribute = {
  key: string,
  rules: Array<string | Rule>,
};

export type Rule = {
  key: string,
  params: { [string]: mixed },
  attribute?: string,
};

export type Matcher = {
  key: string | null,
  check: (
    enity: Entity | null,
    attribute: string | null,
    CheckParams,
  ) => CheckResult | Promise<CheckResult>,
  params?: CheckParams,
  attribute?: string,
};

export type MatcherError = {
  key: string | null,
  attribute: string | null,
};


export type CreateRulesParams = {
  attributes: Array<Attribute>,
  [string]: any,
};
export type CreateRulesResult = CreateRulesParams & {
  attributesRules: Array<Rule>,
};
export type CreateRules =
  (CreateRulesParams) => CreateRulesResult;


export type CreateEntityMatchersParams = {
  attributesRules: Array<Rule>,
  matchers: Array<Matcher>,
  [string]: any,
};
export type CreateEntityMatchersResult = CreateEntityMatchersParams & {
  entityMatchers: Array<Matcher>
};
export type CreateEntityMatchers =
  (CreateEntityMatchersParams) => CreateEntityMatchersResult;


export type CreateValdiatorErrorsParams = {
  entity: Entity,
  entityMatchers: Array<Matcher>,
  [string]: any,
}
export type CreateMatchersErrorsResult =
  Promise<CreateValdiatorErrorsParams & {
    matchersErrors: Array<MatcherError>,
  }>;
export type CreateMatchersErrors =
  (CreateValdiatorErrorsParams) => CreateMatchersErrorsResult;


export type Validate = ({
  entity: Entity,
  matchers: Array<Matcher>,
  attributes: Array<Attribute>,
  [string]: mixed,
}) => CreateMatchersErrorsResult;
